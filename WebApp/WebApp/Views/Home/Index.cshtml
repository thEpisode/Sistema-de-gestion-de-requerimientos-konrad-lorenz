@{
    ViewBag.Title = "Inicio";
    Layout = "~/Views/Shared/_HomeLayout.cshtml";

}

<style>
    #CheckStatusRequirementBox{
        height:432px;
    }
    .status-opacity{
        min-height:432px;
        height:432px;
    }
    .status-parallax{
        min-height:432px;
        height:432px;
    }
    .data-container{
        display:inline-flex;
    }
    .data-container>section{
        position:relative;
    }
    .loading-text{
        color: #333 !important;
        text-align:center;
        font-size: 2em;
    }
    .loading-text-white{
        color: #fff !important;
        text-align:center;
        font-size: 2em;
    }
    .spinner {
      width: 40px;
      height: 40px;
      background-color: #333;

      margin: 35px auto;
      -webkit-animation: sk-rotateplane 1.2s infinite ease-in-out;
      animation: sk-rotateplane 1.2s infinite ease-in-out;
    }

    .spinner-white {
      width: 40px;
      height: 40px;
      background-color: #fff;

      margin: 35px auto;
      -webkit-animation: sk-rotateplane 1.2s infinite ease-in-out;
      animation: sk-rotateplane 1.2s infinite ease-in-out;
    }

    @@-webkit-keyframes sk-rotateplane {
      0% { -webkit-transform: perspective(120px) }
      50% { -webkit-transform: perspective(120px) rotateY(180deg) }
      100% { -webkit-transform: perspective(120px) rotateY(180deg)  rotateX(180deg) }
    }

    @@keyframes sk-rotateplane {
      0% { 
        transform: perspective(120px) rotateX(0deg) rotateY(0deg);
        -webkit-transform: perspective(120px) rotateX(0deg) rotateY(0deg) 
      } 50% { 
        transform: perspective(120px) rotateX(-180.1deg) rotateY(0deg);
        -webkit-transform: perspective(120px) rotateX(-180.1deg) rotateY(0deg) 
      } 100% { 
        transform: perspective(120px) rotateX(-180deg) rotateY(-179.9deg);
        -webkit-transform: perspective(120px) rotateX(-180deg) rotateY(-179.9deg);
      }
}
</style>

<section id="main-container">
    <section id="loading">
        <p class="loading-text">Cargando</p>
        <div class="spinner"></div>
    </section>
    

    <section id="CreateRequirementBox">
        @Html.Partial("CreateRequirement")
    </section>

    <section id="CheckStatusRequirementBox">
        @Html.Partial("CheckStatusRequirement")
    </section>
</section>



@section Scripts{
    <script>

        var templateName = "Default";
        var typeField = {
            string: '<input class="w-input" type="text" id="{0}" name="{1}" placeholder="{2}">',
            text: '<textarea class="w-input message" id="{0}" name="{1}" placeholder="{2}"></textarea>'
        };
        var originalHTML = "";
        var Template = null;


        (function () {
            $("#loading").hide();
            $("#CreateRequirementBox").hide();
            $("#CheckStatusRequirementBox").hide();

            getTemplateByName();

            var fakeLoading = setInterval(function () {

            }, 1000);
        })();

        function createRequirements_OnClick() {
            $("#CreateRequirementBox").show();
            $("#CheckStatusRequirementBox").hide();
        }

        function CheckStatusRequirements_OnClick() {
            $("#CheckStatusRequirementBox").show();
            $("#CreateRequirementBox").hide();
        }
        function reloadStatus() {
            $("#loading-status-section").hide();
            UniversalHelper.slideOut("#response-status-section");
            UniversalHelper.slideIn("#request-status-section");
        }

        function searchButton_OnClick() {
            if ($("#ticket").val().length > 0) {
                UniversalHelper.slideOut("#request-status-section");
                UniversalHelper.slideIn("#loading-status-section");

                $.ajax({
                    url: "@Url.Action("GetStatusTicket", "Home")",
                    type: "GET",
                    data: "ticket=" + $("#ticket").val(),
                    success: function (data) {
                        UniversalHelper.slideOut("#loading-status-section");
                        UniversalHelper.slideIn("#response-status-section");

                        switch (data.Status) {
                            case 0:
                                $("#response-status-section>h2").text("EN ESPERA");
                                $("#response-status-section>p").text("No ha sido atendido por un agente");
                                $("#response-status-section>img").attr("src", "/Content/User/images/first-step.png");
                                break;
                            case 1:
                                $("#response-status-section>h2").text("EN PROGRESO");
                                $("#response-status-section>p").text("El agente está trabajando en su solicitud");
                                $("#response-status-section>img").attr("src", "/Content/User/images/second-step.png");
                                break;
                            case 2:
                                $("#response-status-section>h2").text("RECHAZADO");
                                $("#response-status-section>p").text("El agente ha rechazado el requerimiento");
                                $("#response-status-section>img").attr("src", "/Content/User/images/rejected-headline.png");
                                break;
                            case 3:
                                $("#response-status-section>h2").text("FINALIZADO");
                                $("#response-status-section>p").text("¡El agente ha finalizado su trabajo!, por favor califica el servicio");
                                $("#response-status-section>img").attr("src", "/Content/User/images/third-step.png");
                                break;
                            case 4:
                                $("#response-status-section>h2").text("FINALIZADO");
                                $("#response-status-section>p").text("Este requerimiento ya fue finalizado y se recibió la calificación");
                                break;
                            default:
                                break;
                        }
                    },
                    error: function (data) {
                        console.log(data);
                        switch (data.status) {
                            case 404:
                                reloadStatus();
                                alert('No se encontró el ticket, revisa que está bien escrito.')
                                break;
                            default:
                                reloadStatus();
                                alert('Ocurrió un imprevisto, para más detalles revisa la consola de desarrolladores');
                                break;
                        }
                    }
                });
            }
        }


        function getTemplateByName() {
            $('#builder>tbody').find('tr').remove();
            $.ajax({
                url: "@Url.Action("GetTemplateByName", "Requirement")",
                type: "GET",
                data: "name=" + templateName,
                success: function (data) {
                    console.log(data);
                    Template = data.Template;
                    formBuilder(data.Template);
                },
                error: function (data) {
                    
                    console.log(data);
                    switch (data.status) {
                        case 403:
                        case 400:
                        case 404:
                            alert(JSON.parse(data.responseText).Message);
                            break;
                        default:
                            alert('Ocurrió un imprevisto, para más detalles revisa la consola de desarrolladores');
                            break;
                    }
                }
            });
        }

        function formBuilder(stringBuilder) {
            $("#form-title").text('Constructor: ' + templateName);

            if (stringBuilder.length > 0) {
                var items = stringBuilder.split(';');
                var html = "";
                $.each(items, function (key, value) {
                    var row = value.split('|');

                    html +=
                        '<article id="field-' + key + '">' +
                        
                            
                            typeField[row[0]].replace('{0}', row[1]).replace('{1}', row[1]).replace('{2}', row[1]) +
                            
                        '</article>';
                });
                $("#form-builder>section").append(html);
            }
        }

        $("#form-builder").on("submit", function (event) {
            $.ajax({
                url: "@Url.Action("CreateRequirement", "Requirement")",
                type: "POST",
                data: $("#form-builder").serialize(),
                success: function (data) {                    
                    console.log(data);

                    $("#ticket-output").text(data);
                    $(".w-form-done").show();
                    $("#form-builder").hide();
                },
                error: function (data) {
                    sessionStorage.removeItem("user");
                    console.log(data);
                    switch (data.status) {
                        case 403:
                        case 400:
                        case 404:
                            alert(JSON.parse(data.responseText).Message);
                            break;
                        default:                            
                            alert('Ocurrió un imprevisto, para más detalles revisa la consola de desarrolladores');
                            break;
                    }
                }
            });
        event.preventDefault();
        });

    </script>
}